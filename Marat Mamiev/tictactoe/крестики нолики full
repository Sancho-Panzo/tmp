#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int a[4][4];
int m, n;

int VivodMatritsi() //?????? ????
{
	int i = 1;
	int j = 1;
	for (i; i < 4; i++)
	{
		if (printf("|") < 0) return 1;
		for (j; j < 4; j++)
		{
			if (a[i][j] == 0) { if (printf("_|") < 0) return 2; };
			if (a[i][j] == 1) { if (printf("X|") < 0) return 3; };
			if (a[i][j] == 2) { if (printf("0|") < 0) return 4; };
		};
		j = 1;
		if (printf("\n") < 0) return 5;
	}
	if (printf("\n") < 0) return 6;
	return 0;
}

int Vvod()
{
	if (printf("Line, Column: ") < 0) return 1;
	if (scanf("%d", &m) != 1) return 2;
	if (scanf("%d", &n) != 1) return 3;
	if (m > 3 || m < 1)
	{
		if (printf("Invalid coordinates. Try again.\n") < 0) return 4;
		if (Vvod() != 0) return 5;
	}
	if (n > 3 || n < 1)
	{
		if (printf("Invalid coordinates. Try again.\n") < 0) return 6;
		if (Vvod() != 0) return 7;
	}
	return 0;
}

int HodIgroka() //??? ?????? (?????? ????? ??????? ? ???????)
{
	if (printf("Choose coordinates for your turn.\n") < 0) return 1;
	if (Vvod() != 0)
	{
		printf("Error_Vvod\n");
		if (system("pause") == -1) return 2;
		exit(0);
		return 3;
	}

	if (a[m][n] == 1 || a[m][n] == 2) //???? ??? ????? ?? ???? ??????
	{
		if (printf("Invalid coordinates. Try again.\n") < 0) return 4;
		if (HodIgroka() != 0) return 5;
	}
	else
	{
		a[m][n] = 2;
		if (VivodMatritsi() != 0)
		{
			printf("Error_VivodMatritsi\n");
			if (system("pause") == -1) return 6;
			exit(0);
			return 7;
		}
	}
	return 0;
}

int HodComputera() //??? ??????????
{
	int k = 1; //???????
	int l = 1; //???????
	for (k; k < 4; k++)
	{
		if (a[k][1] == a[k][2] && a[k][1] == 1)
		{
			if (a[k][3] == 0)
			{
				a[k][3] = 1;
				return 0;
			}
		}
		if (a[k][1] == a[k][3] && a[k][1] == 1)
		{
			if (a[k][2] == 0)
			{
				a[k][2] = 1;
				return 0;
			}
		}
		if (a[k][2] == a[k][3] && a[k][2] == 1)
		{
			if (a[k][1] == 0)
			{
				a[k][1] = 1;
				return 0;
			}
		}
	}
	for (l; l < 4; l++)
	{
		if (a[1][l] == a[2][l] && a[1][l] == 1)
		{
			if (a[3][l] == 0)
			{
				a[3][l] = 1;
				return 0;
			}
		}
		if (a[1][l] == a[3][l] && a[1][l] == 1)
		{
			if (a[2][l] == 0)
			{
				a[2][l] = 1;
				return 0;
			}
		}
		if (a[2][l] == a[3][l] && a[2][l] == 1)
		{
			if (a[1][l] == 0)
			{
				a[1][l] = 1;
				return 0;
			}
		}
	}

	if (a[1][1] == a[2][2] && a[1][1] == 1)
	{
		if (a[3][3] == 0)
		{
			a[3][3] = 1;
			return 0;
		}
	}
	if (a[1][1] == a[3][3] && a[1][1] == 1)
	{
		if (a[2][2] == 0)
		{
			a[2][2] = 1;
			return 0;
		}
	}
	if (a[2][2] == a[3][3] && a[2][2] == 1)
	{
		if (a[1][1] == 0)
		{
			a[1][1] = 1;
			return 0;
		}
	}
	if (a[1][3] == a[2][2] && a[1][3] == 1)
	{
		if (a[3][1] == 0)
		{
			a[3][1] = 1;
			return 0;
		}
	}
	if (a[1][3] == a[3][1] && a[1][3] == 1)
	{
		if (a[2][2] == 0)
		{
			a[2][2] = 1;
			return 0;
		}
	}
	if (a[2][2] == a[3][1] && a[2][2] == 1)
	{
		if (a[1][3] == 0)
		{
			a[1][3] = 1;
			return 0;
		}
	}

	int m = 1; //???????
	int n = 1; //???????
	for (m; m < 4; m++)
	{
		if (a[m][1] == a[m][2] && a[m][1] == 2)
		{
			if (a[m][3] == 0)
			{
				a[m][3] = 1;
				return 0;
			}
		}
		if (a[m][1] == a[m][3] && a[m][1] == 2)
		{
			if (a[m][2] == 0)
			{
				a[m][2] = 1;
				return 0;
			}
		}
		if (a[m][2] == a[m][3] && a[m][2] == 2)
		{
			if (a[m][1] == 0)
			{
				a[m][1] = 1;
				return 0;
			}
		}
	}
	for (n; n < 4; n++)
	{
		if (a[1][n] == a[2][n] && a[1][n] == 2)
		{
			if (a[3][n] == 0)
			{
				a[3][n] = 1;
				return 0;
			}
		}
		if (a[1][n] == a[3][n] && a[1][n] == 2)
		{
			if (a[2][n] == 0)
			{
				a[2][n] = 1;
				return 0;
			}
		}
		if (a[2][n] == a[3][n] && a[2][n] == 2)
		{
			if (a[1][n] == 0)
			{
				a[1][n] = 1;
				return 0;
			}
		}
	}
	if (a[1][1] == a[2][2] && a[1][1] == 2)
	{
		if (a[3][3] == 0)
		{
			a[3][3] = 1;
			return 0;
		}
	}
	if (a[1][1] == a[3][3] && a[1][1] == 2)
	{
		if (a[2][2] == 0)
		{
			a[2][2] = 1;
			return 0;
		}
	}
	if (a[2][2] == a[3][3] && a[2][2] == 2)
	{
		if (a[1][1] == 0)
		{
			a[1][1] = 1;
			return 0;
		}
	}
	if (a[1][3] == a[2][2] && a[1][3] == 2)
	{
		if (a[3][1] == 0)
		{
			a[3][1] = 1;
			return 0;
		}
	}
	if (a[1][3] == a[3][1] && a[1][3] == 2)
	{
		if (a[2][2] == 0)
		{
			a[2][2] = 1;
			return 0;
		}
	}
	if (a[2][2] == a[3][1] && a[2][2] == 2)
	{
		if (a[1][3] == 0)
		{
			a[1][3] = 1;
			return 0;
		}
	}
	
	if (Random() != 0)
	{
		printf("Error_Random\n");
		if (system("pause") == -1) return 1;
		exit(0);
		return 2;
	}
	return 0;
}

int Random()
{
	int s;
	if (a[1][1] == 0 || a[2][2] == 0 || a[3][3] == 0 || a[1][3] == 0 || a[3][1] == 0)
	{
		srand(time(NULL));
		s = rand() % 5;
		if (s == 0)
		{
			if (a[1][1] != 0) s = 1; //???? ??? ????? ?? ???? ??????
			else a[1][1] = 1;
		}
		if (s == 1)
		{
			if (a[1][3] != 0) s = 2; //???? ??? ????? ?? ???? ??????
			else a[1][3] = 1;
		}
		if (s == 2)
		{
			if (a[3][1] != 0) s = 3; //???? ??? ????? ?? ???? ??????
			else a[3][1] = 1;
		}
		if (s == 3)
		{
			if (a[3][3] != 0) s = 4; //???? ??? ????? ?? ???? ??????
			else a[3][3] = 1;
		}
		if (s == 4)
		{
			if (a[2][2] != 0) //???? ??? ????? ?? ???? ??????
			{
				if (a[1][1] == 0) a[1][1] = 1;
				else
				{
					if (a[1][3] == 0) a[1][3] = 1;
					else
					{
						if (a[3][1] == 0) a[3][1] = 1;
						else a[3][3] = 1;
					}
				}
			}
			else a[2][2] = 1;
		}
		return 0;
	}
	else
	{
		for (m = 1; m < 4; m++)
		{
			for (n = 1; n < 4; n++)
			{
				if (a[m][n] == 0) a[m][n] = 1;
			}
		}
	}
	return 0;
}


int Proverka() //???????? ?? ????? ????
{
	int k = 1; //???????
	int l = 1; //???????
	for (k; k < 4; k++) //???????? ?? 3 ?????? ? ???????
	{
		if (a[k][1] == 1 && a[k][2] == 1 && a[k][3] == 1)
		{
			if (printf("You lost.\n") < 0) return 1;
			if (printf("Thank you for playing!\n") < 0) return 2;
			if (system("pause") == -1) return 3;
			exit(0);
		}
	}
	for (l; l < 4; l++) // ???????? ?? 3 ?????? ? ???????
	{
		if (a[1][l] == 1 && a[2][l] == 1 && a[3][l] == 1)
		{
			if (printf("You lost.\n") < 0) return 4;
			if (printf("Thank you for playing!\n") < 0) return 5;
			if (system("pause") == -1) return 6;
			exit(0);
		}
	}
	if ((a[1][1] == 1 && a[2][2] == 1 && a[3][3] == 1) || (a[3][1] == 1 && a[2][2] == 1 && a[1][3] == 1)) //???????? ?? 3 ?????? ?? ??????????
	{
		if (printf("You lost.\n") < 0) return 7;
		if (printf("Thank you for playing!\n") < 0) return 8;
		if (system("pause") == -1) return 9;
		exit(0);
	}
	return 0;
}

int main()
{
	int i = 1;
	int j = 1;
	for (i; i < 4; i++)
	{
		for (j; j < 4; j++)
		{
			a[i][j] = 0;
		};
		j = 1;
	};

	if (printf("You are playing Tic-Tac-Toe! You are playing for zeros. Computer makes an opening move.\n") < 0) 
	{
		printf("Error\n");
		if (system("pause") == -1) return 1;
		exit(0);
		return 2;
	}
	if (printf("Computer's move:\n") < 0) 
	{
		printf("Error\n");
		if (system("pause") == -1) return 3;
		exit(0);
		return 4;
	}
	if (Random() != 0)
	{
		printf("Error_Random\n");
		if (system("pause") == -1) return 5;
		exit(0);
		return 6;
	} //?????? ???
	if (VivodMatritsi() != 0)
	{
		printf("Error_VivodMatritsi\n");
		if (system("pause") == -1) return 7;
		exit(0);
		return 8;
	}
	if (HodIgroka() != 0)
	{
		printf("Error_HodIgroka\n");
		if (system("pause") == -1) return 9;
		exit(0);
		return 10;
	} //????? ????? //?????? ???
	if (printf("Computer's move:\n") < 0) 
	{
		printf("Error\n");
		if (system("pause") == -1) return 11;
		exit(0);
		return 12;
	}
	if (a[2][2] == 0) a[2][2] = 1;
	else
	{
		if (Random() != 0)
		{
			printf("Error_Random\n");
			if (system("pause") == -1) return 13;
			exit(0);
			return 14;
		}
	} //?????? ???
	if (VivodMatritsi() != 0)
	{
		printf("Error_VivodMatritsi\n");
		if (system("pause") == -1) return 15;
		exit(0);
		return 16;
	}
	if (HodIgroka() != 0)
	{
		printf("Error_HodIgroka\n");
		if (system("pause") == -1) return 17;
		exit(0);
		return 18;
	} //????????? ???
	if (printf("Computer's move:\n") < 0)
	{
		printf("Error\n");
		if (system("pause") == -1) return 19;
		exit(0);
		return 20;
	}
	if (HodComputera() != 0)
	{
		printf("Error_HodComputera\n");
		if (system("pause") == -1) return 21;
		exit(0);
		return 22;
	} //????? ???
	if (VivodMatritsi() != 0)
	{
		printf("Error_VivodMatritsi\n");
		if (system("pause") == -1) return 23;
		exit(0);
		return 24;
	}
	if (Proverka() != 0)
	{
		printf("Error_Proverka\n");
		if (system("pause") == -1) return 25;
		exit(0);
		return 26;
	}
	if (HodIgroka() != 0)
	{
		printf("Error_HodIgroka\n");
		if (system("pause") == -1) return 27;
		exit(0);
		return 28;
	} //?????? ???
	if (printf("Computer's move:\n") < 0)
	{
		printf("Error\n");
		if (system("pause") == -1) return 29;
		exit(0);
		return 30;
	}
	if (HodComputera() != 0)
	{
		printf("Error_HodComputera\n");
		if (system("pause") == -1) return 31;
		exit(0);
		return 32;
	} //??????? ???
	if (VivodMatritsi() != 0)
	{
		printf("Error_VivodMatritsi\n");
		if (system("pause") == -1) return 33;
		exit(0);
		return 34;
	}
	if (Proverka() != 0)
	{
		printf("Error_Proverka\n");
		if (system("pause") == -1) return 35;
		exit(0);
		return 36;
	}
	if (HodIgroka() != 0)
	{
		printf("Error_HodIgroka\n");
		if (system("pause") == -1) return 37;
		exit(0);
		return 38;
	} //??????? ???
	if (printf("Computer's move:\n") < 0)
	{
		printf("Error\n");
		if (system("pause") == -1) return 39;
		exit(0);
		return 40;
	}
	if (HodComputera() != 0)
	{
		printf("Error_HodComputera\n");
		if (system("pause") == -1) return 41;
		exit(0);
		return 42;
	} //??????? ???
	if (VivodMatritsi() != 0)
	{
		printf("Error_VivodMatritsi\n");
		if (system("pause") == -1) return 43;
		exit(0);
		return 44;
	}
	if (Proverka() != 0)
	{
		printf("Error_Proverka\n");
		if (system("pause") == -1) return 45;
		exit(0);
		return 46;
	}
	
	if (printf("Draw.\nThank you for playing!\n") < 0)
	{
		printf("Error\n");
		if (system("pause") == -1) return 47;
		exit(0);
		return 48;
	}
	if (system("pause") == -1) return 49;
	exit(0);
	return 0;
}
